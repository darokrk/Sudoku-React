{"version":3,"sources":["Components/App.js","Components/Button/Button.js","Components/Header/Header.js","Components/Tile/Tile.js","Components/Board/Board.js","Components/TimeWatch/TimeWatch.js","Components/Result/Result.js","Components/ScoreList/ScoreList.js","Components/Paused/Paused.js","helper.js","index.js"],"names":["interval","Button","props","react_default","a","createElement","className","concat","class","onClick","click","board","name","Header","Components_Button_Button","pauseClick","Tile","id","type","min","max","value","onChange","e","change","rowIndex","disabled","Board","initialBoardStatus","Object","toConsumableArray","initialBoard","map","row","field","actualBoard","i","initialRowFields","Components_Tile_Tile","key","TimeWatch","_props$time","time","minutes","seconds","timeFormat","gameLevel","Result","_props$finishedTime","finishedTime","ScoreList","results","item","Components_Result_Result","sort","b","Paused","getLevel","arr","Math","floor","random","length","data","sudoku","generate","board_string_to_grid","App","state","finished","paused","handleTileChange","target","inputValue","updateBoard","_this","square","setState","handleRestart","clearInterval","stopWatch","handleNewGame","handleSolve","alert","solvedBoard","board_grid_to_string","solve","handleCheck","checkedBoard","getTime","_this$state$time","prevState","objectSpread","setInterval","handlePause","this","finishedBoard","includes","Components_Header_Header","Components_Paused_Paused","Components_Board_Board","Components_TimeWatch_TimeWatch","Components_ScoreList_ScoreList","Component","ReactDOM","render","src_Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.5536d5fe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport sudoku from \"sudoku-umd\";\r\nimport Header from \"./Header/Header\";\r\nimport Board from \"./Board/Board\";\r\nimport Button from \"./Button/Button\";\r\nimport TimeWatch from \"./TimeWatch/TimeWatch\";\r\nimport ScoreList from \"./ScoreList/ScoreList\";\r\nimport Paused from \"./Paused/Paused\";\r\nimport { getLevel } from \"../helper\";\r\n\r\nlet gameLevel = getLevel();\r\nlet data = sudoku.generate(gameLevel);\r\ndata = sudoku.board_string_to_grid(data);\r\n\r\nlet interval;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    initialBoard: data,\r\n    board: data,\r\n    time: {\r\n      seconds: 0,\r\n      minutes: 0\r\n    },\r\n    finished: false,\r\n    finishedTime: [],\r\n    paused: false\r\n  };\r\n\r\n  handleTileChange = (e, id, rowIndex) => {\r\n    if (e.target.value.length > 1) {\r\n      return;\r\n    }\r\n    const inputValue = e.target.value ? e.target.value : \".\";\r\n    const updateBoard = [...this.state.board].map((square, i) => {\r\n      if (i === rowIndex) {\r\n        return (square = square.map((field, i) => {\r\n          if (i === id) return (field = inputValue);\r\n          else return field;\r\n        }));\r\n      } else return square;\r\n    });\r\n    this.setState({\r\n      board: updateBoard\r\n    });\r\n  };\r\n\r\n  handleRestart = () => {\r\n    clearInterval(interval);\r\n    this.stopWatch();\r\n    this.setState({\r\n      board: this.state.initialBoard,\r\n      time: {\r\n        seconds: 0,\r\n        minutes: 0\r\n      },\r\n      finished: false,\r\n      paused: false\r\n    });\r\n  };\r\n\r\n  handleNewGame = () => {\r\n    clearInterval(interval);\r\n    this.stopWatch();\r\n\r\n    gameLevel = getLevel();\r\n    data = sudoku.generate(gameLevel);\r\n    data = sudoku.board_string_to_grid([...data]);\r\n    this.setState({\r\n      initialBoard: data,\r\n      board: data,\r\n      time: {\r\n        seconds: 0,\r\n        minutes: 0\r\n      },\r\n      finished: false,\r\n      paused: false\r\n    });\r\n  };\r\n\r\n  handleSolve = initialBoard => {\r\n    if (this.state.paused) return alert(\"To show solve, first unpause game :)\");\r\n    let solvedBoard = sudoku.board_grid_to_string(initialBoard);\r\n    solvedBoard = sudoku.solve(solvedBoard);\r\n    if (solvedBoard) {\r\n      solvedBoard = sudoku.board_string_to_grid(solvedBoard);\r\n      this.setState({\r\n        board: solvedBoard,\r\n        finished: true\r\n      });\r\n      clearInterval(interval);\r\n    }\r\n  };\r\n\r\n  handleCheck = actualBoard => {\r\n    if (this.state.paused)\r\n      return alert(\"To check the board, first unpause game :)\");\r\n    let checkedBoard = sudoku.board_grid_to_string(actualBoard);\r\n    checkedBoard = sudoku.solve(checkedBoard);\r\n    if (checkedBoard) return alert(\"Keep going you can solve it :)\");\r\n    else return alert(\"You make some mistake, fix some Tiles\");\r\n  };\r\n\r\n  getTime = () => {\r\n    const { seconds, minutes } = this.state.time;\r\n    if (seconds === 60) {\r\n      this.setState(prevState => ({\r\n        time: {\r\n          ...prevState.time,\r\n          minutes: minutes + 1,\r\n          seconds: 0\r\n        }\r\n      }));\r\n    } else {\r\n      this.setState(prevState => ({\r\n        time: {\r\n          ...prevState.time,\r\n          seconds: seconds + 1\r\n        }\r\n      }));\r\n    }\r\n  };\r\n\r\n  stopWatch = () => {\r\n    interval = setInterval(this.getTime, 1000);\r\n  };\r\n\r\n  handlePause = () => {\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      interval = 0;\r\n      this.setState({\r\n        paused: true\r\n      });\r\n    } else {\r\n      this.stopWatch();\r\n      this.setState({\r\n        paused: false\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.stopWatch();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.finished) {\r\n      clearInterval(interval);\r\n      return;\r\n    } else {\r\n      let finishedBoard = sudoku.board_grid_to_string(this.state.board);\r\n      let result = finishedBoard.includes(\".\");\r\n      if (!result) {\r\n        finishedBoard = sudoku.solve(finishedBoard);\r\n        if (finishedBoard) {\r\n          alert(`Congratulations you solved ${gameLevel} level sudoku !!!`);\r\n          const finishedTime = [this.state.time];\r\n          this.setState(prevState => ({\r\n            finished: true,\r\n            finishedTime: [...prevState.finishedTime, ...finishedTime]\r\n          }));\r\n        } else {\r\n          alert(\"Your sudoku was solved incorrect...\");\r\n          clearInterval(interval);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header pauseClick={this.handlePause} />\r\n        {this.state.paused ? (\r\n          <Paused />\r\n        ) : (\r\n          <Board\r\n            change={this.handleTileChange}\r\n            initialBoard={this.state.initialBoard}\r\n            board={this.state.board}\r\n          />\r\n        )}\r\n        <div className=\"buttons__wrapper\">\r\n          <Button\r\n            class={\"check\"}\r\n            board={this.state.board}\r\n            name={\"Check\"}\r\n            click={this.handleCheck}\r\n          />\r\n          <Button class={\"game\"} name={\"New Game\"} click={this.handleNewGame} />\r\n          <Button\r\n            class={\"solve\"}\r\n            board={this.state.initialBoard}\r\n            name={\"Solve\"}\r\n            click={this.handleSolve}\r\n          />\r\n          <Button\r\n            class={\"restart\"}\r\n            name={\"Restart\"}\r\n            click={this.handleRestart}\r\n          />\r\n        </div>\r\n        <TimeWatch time={this.state.time} gameLevel={gameLevel} />\r\n        <ScoreList finishedTime={this.state.finishedTime} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport \"./Button.scss\";\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button\r\n      className={`button button--${props.class}`}\r\n      onClick={() => props.click(props.board)}\r\n    >\r\n      {props.name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"../Button/Button\";\r\nimport \"./Header.scss\";\r\n\r\nconst Header = props => (\r\n  <header className=\"header__wrapper\">\r\n    <h1 className=\"header__title\">{`Sudoku Game`}</h1>\r\n    <Button class={\"pause\"} name={\"Pause\"} click={props.pauseClick} />\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","// import React from \"react\";\r\nimport React from \"react\";\r\nimport \"./Tile.scss\";\r\n\r\nconst Tile = props => {\r\n  return (\r\n    <td\r\n      className={\r\n        props.id === 2 || props.id === 5\r\n          ? \"board__data board__data--border\"\r\n          : \"board__data\"\r\n      }\r\n    >\r\n      <input\r\n        className=\"board__input\"\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max=\"9\"\r\n        value={props.value}\r\n        onChange={e => props.change(e, props.id, props.rowIndex)}\r\n        disabled={props.disabled}\r\n      />\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"../Tile/Tile\";\r\nimport \"./Board.scss\";\r\n\r\nconst Board = props => {\r\n  const initialBoardStatus = [...props.initialBoard].map(row => {\r\n    return (row = row.map(field => {\r\n      if (field === \".\") return false;\r\n      else return true;\r\n    }));\r\n  });\r\n\r\n  const actualBoard = [...props.board].map((row, i) => {\r\n    const rowIndex = i;\r\n    const initialRowFields = initialBoardStatus[i];\r\n    row = row.map((field, i) => {\r\n      return (\r\n        <Tile\r\n          key={i}\r\n          id={i}\r\n          rowIndex={rowIndex}\r\n          value={field === \".\" ? \"\" : field}\r\n          change={props.change}\r\n          disabled={initialRowFields[i]}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <tr\r\n        className={\r\n          i === 2 || i === 5 ? \"board__row board__row--border\" : \"board__row\"\r\n        }\r\n        key={i}\r\n      >\r\n        {row}\r\n      </tr>\r\n    );\r\n  });\r\n  return (\r\n    <table className=\"board-wrapper\">\r\n      <tbody className=\"board\">{actualBoard}</tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport \"./TimeWatch.scss\";\r\n\r\nconst TimeWatch = props => {\r\n  const { minutes, seconds } = props.time;\r\n  const timeFormat = (minutes, seconds) => {\r\n    if (seconds > 9) return ` 0${minutes}:${seconds}`;\r\n    else if (minutes > 9) return ` ${minutes}:${seconds}`;\r\n    return ` 0${minutes}:0${seconds}`;\r\n  };\r\n  return (\r\n    <p className=\"timeWatch\">\r\n      Your Time\r\n      {timeFormat(minutes, seconds)}\r\n      <strong>{` ${props.gameLevel}`}</strong>\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default TimeWatch;\r\n","import React from \"react\";\r\n\r\nconst Result = props => {\r\n  const { minutes, seconds } = props.finishedTime;\r\n  const timeFormat = (minutes, seconds) => {\r\n    if (seconds > 9) return `0${minutes}:${seconds}`;\r\n    return ` 0${minutes}:0${seconds}`;\r\n  };\r\n  return <li>{timeFormat(minutes, seconds)}</li>;\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport Result from \"../Result/Result\";\r\nimport \"./ScoreList.scss\";\r\n\r\nconst ScoreList = props => {\r\n  const results = props.finishedTime.map((item, i) => (\r\n    <Result key={i} finishedTime={item} />\r\n  ));\r\n  results.sort((a, b) => b - a);\r\n  return <ul className=\"score-list\">{results}</ul>;\r\n};\r\n\r\nexport default ScoreList;\r\n","import React from \"react\";\r\nimport \"./Paused.scss\";\r\n\r\nconst Paused = () => {\r\n  return <div className=\"paused\" />;\r\n};\r\n\r\nexport default Paused;\r\n","const randomLevel = arr => arr[Math.floor(Math.random() * arr.length)];\r\n\r\nexport const getLevel = () => {\r\n  const gameLevel = [\r\n    \"easy\",\r\n    \"medium\",\r\n    \"hard\",\r\n    \"very-hard\",\r\n    \"insane\",\r\n    \"inhuman\"\r\n  ];\r\n  return randomLevel(gameLevel);\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./Components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}